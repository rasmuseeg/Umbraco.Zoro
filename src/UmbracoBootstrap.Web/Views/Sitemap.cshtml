@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using System.Xml.Linq;
@using umbraco.cms.businesslogic.web;
@using System.Web.Configuration;
@using System.Text;
@using System.Globalization;
@{
    Layout = null;

    string domain = Request.Url.GetLeftPart(UriPartial.Authority);

    XDocument doc = new XDocument(new XDeclaration("1.0", "utf-8", "yes"));
    XNamespace ns = "http://www.sitemaps.org/schemas/sitemap/0.9";
    XElement channel = new XElement(ns + "urlset");

    var sites = Model.Content
        .Descendants()
        .Where(x => x.IsVisible());

    channel.Add(GetItems(ns, sites, domain));

    doc.Add(channel);

    // Add headers
    Response.AddHeader("Content-Type", "application/xml, text/xml; charset=utf-8");
    Response.AddHeader("Content-Disposition", "filename=sitemap.xml");

    // write the xml document to respons
    @Html.Raw("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
    @Html.Raw(doc.ToString())
}

@functions {

    public XElement[] GetItems(XNamespace ns, IEnumerable<IPublishedContent> sites, string domain)
    {
        var items = new List<XElement>();
        foreach (var item in sites)
        {
            XElement xmlItem = new XElement(ns + "url",
                new XElement(ns + "loc", item.UrlAbsolute()),
                new XElement(ns + "lastmod", (Model.Content.UpdateDate).ToString("yyyy-MM-dd")),
                new XElement(ns + "changefreq", "monthly"),
                new XElement(ns + "priority", "1.0")
            );
            items.Add(xmlItem);
        }
        return items.ToArray();
    }
}