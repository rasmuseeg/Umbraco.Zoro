@inherits Umbraco.Web.Macros.PartialViewMacroPage
@using UmbracoBootstrap.Web.Models;
@using UmbracoBootstrap.Web.Controllers;
@{ 
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    Html.SetValidationMessageElement("div");

    var loginPageId = Model.MacroParameters.GetValue<string>("loginPageId");
    IPublishedContent loginPage = Umbraco.TypedContent(loginPageId);

    if(loginPage == null)
    {
        throw new NullReferenceException("Login Page was not found.");
    }

    if(Umbraco.HasQueryString("key") && Umbraco.HasQueryString("email"))
    {
        // Get member by email
        string email = Umbraco.GetQueryString<string>("email");
        string key = Umbraco.GetQueryString<string>("key");

        string redirectUrl = Url.SurfaceAction<MemberController>("HandleApproveMember", new {
            Email = email,
            SecurityKey = key,
            LoginPageUrl = loginPage.Url
        });
        Response.Redirect(redirectUrl);

        //var memberController = new MemberController();
        //var result = memberController.HandleApproveMember(new ApproveMemberModel()
        //{
        //    Email = email,
        //    SecurityKey = key,
        //    LoginPageUrl = loginPage.Url
        //});

        //result.ExecuteResult(ViewContext.Controller.ControllerContext);

        @Html.ValidationSummary()

        @*if (memberController.TempDataHelper.EmailNotFound)
        {
            <div class="alert alert-error">
                @Umbraco.GetDictionaryValue("EmailNotFound", "EmailNotFound")
            </div>
        }*@
        @*if (memberController.TempDataHelper.InvalidSecurityKey)
        {
            <div class="alert alert-danger">
                @Umbraco.GetDictionaryValue("InvalidSecurityKey", "InvalidSecurityKey")
            </div>
        }*@
    }
    else
    {
        var termsOfUsePageId = Model.MacroParameters.GetValue<string>("termsOfUsePageId");
        var privacyPolicyPageId = Model.MacroParameters.GetValue<string>("privacyPolicyPageId");
        IPublishedContent termsOfUsePage = Umbraco.TypedContent(termsOfUsePageId);
        IPublishedContent privacyPolicyPage = Umbraco.TypedContent(privacyPolicyPageId);
        var registerProfileModel = new RegisterProfileModel()
        {
            //LoginPageUrl = loginPage.UrlAbsolute()
        };

        @RenderRegisterForm(registerProfileModel, termsOfUsePage, privacyPolicyPage)
    }
}



@helper RenderRegisterForm(RegisterProfileModel registerProfileModel, IPublishedContent termsOfUsePage, IPublishedContent privacyPolicyPage) { 
    using(Html.BeginUmbracoForm<MemberController>("HandleRegisterProfile", FormMethod.Post))
    {
        @Html.ValidationSummary("registerProfileModel", true)

        <div class="form-group">
            @Html.LabelFor(m=> registerProfileModel.FirstName, new { @class="control-label" })
            @Html.TextBoxFor(m => registerProfileModel.FirstName, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => registerProfileModel.FirstName, "", new { @class="invalid-feedback" })
        </div>

         <div class="form-group">
            @Html.LabelFor(m=> registerProfileModel.LastName, new { @class="control-label" })
            @Html.TextBoxFor(m => registerProfileModel.LastName, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => registerProfileModel.LastName, "", new { @class="invalid-feedback" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m=> registerProfileModel.PhoneNumber, new { @class="control-label" })
            @Html.TextBoxFor(m => registerProfileModel.PhoneNumber, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => registerProfileModel.PhoneNumber, "", new { @class="invalid-feedback" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => registerProfileModel.Email, new { @class = "control-label" })
            @Html.TextBoxFor(m => registerProfileModel.Email, new { @class = "form-control", @autocomplete = "off" })
            @Html.ValidationMessageFor(m => registerProfileModel.Email, "", new { @class="invalid-feedback" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => registerProfileModel.Password, new { @class = "control-label" })
            @Html.PasswordFor(m => registerProfileModel.Password, new { @class = "form-control", @autocomplete = "off" })
            @Html.ValidationMessageFor(m => registerProfileModel.Password, "", new { @class="invalid-feedback" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => registerProfileModel.ConfirmPassword, new { @class = "control-label" })
            @Html.PasswordFor(m => registerProfileModel.ConfirmPassword, new { @class = "form-control", @autocomplete = "off" })
            @Html.ValidationMessageFor(m => registerProfileModel.ConfirmPassword, "", new { @class="invalid-feedback" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => registerProfileModel.PasswordQuestion, new { @class = "control-label" })
            @Html.PasswordFor(m => registerProfileModel.PasswordQuestion, new { @class = "form-control", @autocomplete = "off" })
            @Html.ValidationMessageFor(m => registerProfileModel.PasswordQuestion, "", new { @class="invalid-feedback" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => registerProfileModel.PasswordAnswer, new { @class = "control-label" })
            @Html.PasswordFor(m => registerProfileModel.PasswordAnswer, new { @class = "form-control", @autocomplete = "off" })
            @Html.ValidationMessageFor(m => registerProfileModel.PasswordAnswer, "", new { @class="invalid-feedback" })
        </div>

        <div class="form-group">
            <div class="custom-control custom-checkbox">
                @Html.CheckBoxFor(x=> registerProfileModel.AcceptTermsAndPrivacy, new { @class="custom-control-input" })
                <label class="custom-control-label"
                        id="@Html.IdFor(x => registerProfileModel.AcceptTermsAndPrivacy)" 
                        for="@Html.IdFor(x=> registerProfileModel.AcceptTermsAndPrivacy)">
                    @Html.Raw(string.Format(Umbraco.GetDictionaryValue("AcceptTermsAndPrivacy", "I agree to your <a href='{0}'>{1}</a> and <a href='{2}'>{3}</a>"), termsOfUsePage.Url, termsOfUsePage.Name, privacyPolicyPage.Url, privacyPolicyPage.Name))
                </label>
                @Html.ValidationMessageFor(x => registerProfileModel.AcceptTermsAndPrivacy, "", new { @class="invalid-feedback" })
            </div>
        </div>

        @*@Html.HiddenFor(m=> registerProfileModel.LoginPageUrl)*@

        <button class="btn btn-default">@Umbraco.GetDictionaryValue("CreateProfileSubmit", "CreateProfileSubmit")</button>
    }
}